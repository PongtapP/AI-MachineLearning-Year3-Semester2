import cv2
import time
from ultralytics import YOLO
import argparse
import discord
import asyncio
import logging
from logging.handlers import RotatingFileHandler
import os

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Logging
def setup_logging():
    if not os.path.exists('logs'):
        os.makedirs('logs')
    
    main_logger = logging.getLogger()
    main_logger.setLevel(logging.INFO)
    
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    console_handler.setFormatter(console_formatter)
    
    file_handler = RotatingFileHandler('logs/fire_detection.log', maxBytes=5*1024*1024, backupCount=3, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(file_formatter)
    
    error_handler = RotatingFileHandler('logs/error.log', maxBytes=2*1024*1024, backupCount=1, encoding='utf-8')
    error_handler.setLevel(logging.WARNING)
    error_handler.setFormatter(file_formatter)
    
    main_logger.addHandler(console_handler)
    main_logger.addHandler(file_handler)
    main_logger.addHandler(error_handler)
    
    logging.getLogger('discord').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    logging.getLogger('ultralytics').setLevel(logging.WARNING)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Discord (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Token ‡πÅ‡∏•‡∏∞ Channel ID ‡∏ï‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á)
DISCORD_TOKEN = 'MTM0ODgyNDQyMTQ4OTU3MzkwOQ.GT0ad8.chdltb9kPJg1hXOWebqPGt83UhbAAjM76vJxPE'
DISCORD_CHANNEL_ID = 1354418108126855171

class FireDetectionSystem:
    def __init__(self):
        self.exit_flag = False
        self.last_alert_time = 0
        self.cooldown = 300  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        self.client = None
        self.logger = logging.getLogger(__name__)
    
    async def initialize_discord(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Discord Client"""
        intents = discord.Intents.default()
        intents.message_content = True  # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        self.client = discord.Client(intents=intents)
        
        @self.client.event
        async def on_ready():
            self.logger.info(f'‚úÖ Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {self.client.user}')
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Discord ‡πÅ‡∏ö‡∏ö async
        await self.client.start(DISCORD_TOKEN)
    
    async def run_detection(self, camera_index, model_path):
        """‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å"""
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
            self.logger.info(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á index: {camera_index}")
            cap = cv2.VideoCapture(camera_index)
            if not cap.isOpened():
                self.logger.error("‚ùå ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!")
                return
            
            # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö YOLOv8 ‡πÅ‡∏•‡∏∞ YOLO12x)
            self.logger.info(f"üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_path}")
            model = YOLO(model_path)  # ‡πÉ‡∏ä‡πâ YOLO12x ‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            self.logger.info("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            
            # ‡∏•‡∏π‡∏õ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏†‡∏≤‡∏û
            self.logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö...")
            while not self.exit_flag:
                ret, frame = cap.read()
                if not ret:
                    self.logger.error("‚ùå ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
                    break
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
                results = model(frame, conf=0.25, verbose=False)
                self.process_results(frame, results[0])
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á OpenCV
                cv2.imshow('Fire Detection', results[0].plot())
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    self.exit_flag = True
                    
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö: {str(e)}", exc_info=True)
        finally:
            cap.release()
            cv2.destroyAllWindows()
            self.logger.info("üõë ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö")

    def process_results(self, frame, results):
        if len(results.boxes) == 0:
            return
        for box in results.boxes:
            class_name = results.names[int(box.cls)]
            if class_name in ['fire', 'smoke']:
                self.handle_detection(frame, class_name)

    def handle_detection(self, frame, class_name):
        current_time = time.time()
        if current_time - self.last_alert_time < self.cooldown:
            self.logger.debug(f"‚è≥ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á cooldown ({class_name})")
            return
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        image_path = f"detection_{int(time.time())}.jpg"
        cv2.imwrite(image_path, frame)
        self.logger.info(f"üì∏ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ: {image_path}")

        message = "üî• ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÑ‡∏ü!" if class_name == 'fire' else "üí® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ñ‡∏ß‡∏±‡∏ô!"
        asyncio.run_coroutine_threadsafe(self.send_discord_alert(message, image_path), self.client.loop)
        self.last_alert_time = current_time

    async def send_discord_alert(self, message, image_path):
        try:
            if self.client.is_closed():
                self.logger.warning("‚ùå Discord Client ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß")
                return
            
            channel = self.client.get_channel(DISCORD_CHANNEL_ID)
            if channel is None:
                self.logger.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á Discord (ID: {DISCORD_CHANNEL_ID})")
                return
            
            with open(image_path, 'rb') as f:
                await channel.send(message, file=discord.File(f))
            
            self.logger.info("üì§ ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {str(e)}", exc_info=True)
        finally:
            if os.path.exists(image_path):
                os.remove(image_path)
                self.logger.debug(f"üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {image_path}")

async def main(args):
    setup_logging()
    logger = logging.getLogger(__name__)
    system = FireDetectionSystem()
    
    try:
        # ‡πÄ‡∏£‡∏¥‡πà‡∏° Discord ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        await asyncio.gather(
            system.initialize_discord(),
            system.run_detection(args.camera, args.model)
        )
        
    except KeyboardInterrupt:
        logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
    except Exception as e:
        logger.error(f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏•‡∏±‡∏Å: {str(e)}", exc_info=True)
    finally:
        system.exit_flag = True
        if system.client and not system.client.is_closed():
            await system.client.close()
        logger.info("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--camera', type=int, default=0, help='Index ‡∏Å‡∏•‡πâ‡∏≠‡∏á (default: 0)')
    parser.add_argument('--model', type=str, required=True, help='‡∏û‡∏≤‡∏ò‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO (.pt)')
    args = parser.parse_args()
    
    try:
        asyncio.run(main(args))
    except KeyboardInterrupt:
        print("\n‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏±‡πà‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")